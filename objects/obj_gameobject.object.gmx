<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 
type = -1;
start = false;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create event
if (type==-1) instance_destroy();
start = true;
///
switch (type) {
    case 0:
        //Ball
    case 1:
        //Bomb
        spd = 0.05;
        z = 5;
        ///
        calcspd = spd*obj_game.gridsize;
        x_vec = lengthdir_x(calcspd, direction);
        y_vec = lengthdir_y(calcspd, direction);
        z_vec = zdirection/90*calcspd;
        break;
    case 2:
        //Ripple animation
        i = 0;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step event
if (start==false) exit;
///
switch (type) {
    case 0:
        //Ball
    case 1:
        //Bomb
        var gridsize = obj_game.gridsize;
        var wallperc = obj_game.wallperc;
        var gridperc = obj_game.gridperc;
        var maze = obj_game.maze;
        
        //Friction/gravity
        //x_vec -= 0.01*calcspd;
        //y_vec -= 0.01*calcspd;
        z_vec -= 0.1*calcspd;
        
        //Collision
        var xmodif = maze_coll_x(maze, x/gridsize, y/gridsize, gridperc, wallperc);
        if (xmodif!=0) {
            //x += xmodif*2;
            //x_vec *= -1;
            instance_destroy();
        }
        var ymodif = maze_coll_y(maze, x/gridsize, y/gridsize, gridperc, wallperc);
        if (ymodif!=0) {
            //y += ymodif*2;
            //y_vec *= -1;
            instance_destroy();
        }
        var zmodif = (z-0.1*gridsize&lt;0)*(z-0.1*gridsize);
        if (zmodif!=0) {
            zmodif += zmodif*2;
            z_vec *= -1+0.1*calcspd;
            if (os_get_config()!="OEM") {
                with (instance_create(x, y, obj_gameobject)) {
                    type = 2;
                    z = 0;
                    x_vec = 0;
                    z_vec = 0;
                }
            }
        }
        //Movement
        x += x_vec;
        y += y_vec;
        z += z_vec;
        break;
    case 2:
        //Ripple animation
        i++;
        if (i&gt;=room_speed) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw event
if (start==false) exit;
///
switch (type) {
    case 0:
        //Ball
        if (os_get_config()!="OEM") {
            var gridsize = obj_game.gridsize;
            draw_set_color(c_white);
            d3d_draw_ellipsoid(x-0.1*gridsize, y-0.1*gridsize, z-0.1*gridsize, x+0.1*gridsize, y+0.1*gridsize, z+0.1*gridsize, -1, 1, 1, 24);
        }
        break;
    case 1:
        //Bomb
        if (os_get_config()!="OEM") {
            var gridsize = obj_game.gridsize;
            draw_set_color(c_orange);
            d3d_draw_ellipsoid(x-0.1*gridsize, y-0.1*gridsize, z-0.1*gridsize, x+0.1*gridsize, y+0.1*gridsize, z+0.1*gridsize, -1, 1, 1, 24);
        }
        break;
    case 2:
        /*//draw_set_alpha(1);
        d3d_transform_set_identity();
        d3d_transform_add_rotation_x(x_vec); //up/down
        d3d_transform_add_rotation_z(z_vec); //left/right
        d3d_transform_add_translation(x, y, z);
        //draw_set_alpha((room_speed-i)/room_speed);
        draw_circle_glow(0, 0, i/room_speed*obj_game.gridsize*0.7, min(i/5, 20), 5, c_white, c_white);
        d3d_transform_set_identity();*/
        var gridsize = obj_game.gridsize;
        draw_set_color(c_red);
        d3d_draw_cone(x-0.1*gridsize, y-0.1*gridsize, z-0.1*gridsize, x+0.1*gridsize, y+0.1*gridsize, z+0.1*gridsize, -1, 1, 1, 1, 24);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
