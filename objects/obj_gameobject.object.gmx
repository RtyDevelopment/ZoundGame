<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 
type = -1;
start = false;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create event
if (type==-1) instance_destroy();
start = true;
///
switch (type) {
    case 0:
        //Ball
    case 1:
        //Bomb
        spd = 0.05;
        z = 5;
        ///
        calcspd = spd*obj_game.gridsize;
        x_vec = lengthdir_x(calcspd, direction);
        y_vec = lengthdir_y(calcspd, direction);
        z_vec = zdirection/90*calcspd;
        break;
    case 2:
        //Ripple animation
        //Other
        i = 0;
        sound_on = true;
        draw_on = true;
    case 3:
        //Sound object
        //SoundConstants
        snd_list_length[5] = 2;
        snd_list[5,2] = snd_move_wall_2; //Start at the end to not to have to recreate the array again
        snd_list[5,1] = snd_move_wall_1;
        snd_list[5,0] = snd_move_wall_0;
        snd_list_length[4] = 3;
        snd_list[4,3] = snd_move_step_3;
        snd_list[4,2] = snd_move_step_2;
        snd_list[4,1] = snd_move_step_1;
        snd_list[4,0] = snd_move_step_0;
        snd_list_length[3] = 1;
        snd_list[3,1] = snd_ball_wall_1;
        snd_list[3,0] = snd_ball_wall_0;
        snd_list_length[2] = 0;
        snd_list[2,0] = snd_ball_throw;
        snd_list_length[1] = 2;
        snd_list[1,2] = snd_ball_inwall_2;
        snd_list[1,1] = snd_ball_inwall_1;
        snd_list[1,0] = snd_ball_inwall_0;
        snd_list_length[0] = 2;
        snd_list[0,2] = snd_ball_floor_2;
        snd_list[0,1] = snd_ball_floor_1;
        snd_list[0,0] = snd_ball_floor_0;
        var gridsize = obj_game.gridsize;
        sound_pos = audio_emitter_create();
        audio_emitter_position(sound_pos, x, y, z);
        audio_emitter_falloff(sound_pos, 1.5*gridsize, 5*gridsize, 1);
        sound_index = audio_play_sound_on(sound_pos, snd_list[sndtype, irandom(snd_list_length[sndtype])], 0, 0);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step event
if (start==false) exit;
///
switch (type) {
    case 0:
        //Ball
    case 1:
        //Bomb
        var gridsize = obj_game.gridsize;
        var wallperc = obj_game.wallperc;
        var gridperc = obj_game.gridperc;
        var maze = obj_game.maze;
        var dir = point_direction(0, 0, x_vec, y_vec);
        var spd = point_distance(0, 0, x_vec, y_vec);
        
        //Friction/gravity
        //x_vec = lengthdir_x(spd*0.9, dir);
        //y_vec = lengthdir_y(spd*0.9, dir);
        z_vec -= 0.1*calcspd;
        
        //Collision
        var val = abs((((dir mod 180)+90) mod 180)-90);
        switch (maze_move_self(maze, x, y, dir, spd, true, gridsize, gridperc, 0.15)) {
            case 1:
                var xdist_wall;
                xdist_wall = frac(x/gridsize);
                if (xdist_wall&lt;0.5) {
                    xdist_wall = (wallperc-xdist_wall)*0.9;
                } else {
                    xdist_wall = (1-wallperc-xdist_wall)*0.9;
                }
                xdist_wall *= gridsize;
                if (val&lt;30) {
                    with (instance_create(x+xdist_wall, y, obj_gameobject)) {
                        type = 2;
                        z = other.z;
                        x_vec = 90;
                        z_vec = 90;
                        sndtype = 1;
                    }
                    instance_destroy();
                } else {
                    with (instance_create(x+xdist_wall, y, obj_gameobject)) {
                        type = 2;
                        z = other.z;
                        x_vec = 90;
                        z_vec = 90;
                        sndtype = 3;
                    }
                    x_vec*=-1;
                }
                break;
            case 2:
                var ydist_wall;
                ydist_wall = frac(y/gridsize);
                if (ydist_wall&lt;0.5) {
                    ydist_wall = (wallperc-ydist_wall)*0.9;
                } else {
                    ydist_wall = (1-wallperc-ydist_wall)*0.9;
                }
                ydist_wall *= gridsize;
                
                val = 90-val; 
                if (val&lt;30) {
                    with (instance_create(x, y+ydist_wall, obj_gameobject)) {
                        type = 2;
                        z = other.z;
                        x_vec = 90;
                        z_vec = 0;
                        sndtype = 1;
                    }
                    instance_destroy();
                } else {
                    with (instance_create(x, y+ydist_wall, obj_gameobject)) {
                        type = 2;
                        z = other.z;
                        x_vec = 90;
                        z_vec = 0;
                        sndtype = 3;
                    }
                    y_vec*=-1;
                }
                break;
        }
        if (z+z_vec&lt;0) {
            //z += z_vec;
            z_vec *= -1+0.1*calcspd;
            with (instance_create(x, y, obj_gameobject)) {
                type = 2;
                z = 0;
                x_vec = 0;
                z_vec = 0;
                sndtype = 0;
            }
        }
        //Movement
        z += z_vec;
        break;
    case 2:
        //Ripple animation
        i++;
        if (draw_on==true &amp;&amp; i&gt;=room_speed) draw_on = false;
        if (sound_on==true &amp;&amp; audio_is_playing(sound_index)==false) {
            sound_on = false;
            audio_emitter_free(sound_pos);
        }
        if (sound_on==false &amp;&amp; draw_on==false) instance_destroy();
        break;
    case 3:
        //Sound Object
        if (audio_is_playing(sound_index)==false) {
            audio_emitter_free(sound_pos);
            instance_destroy();
        }
        break;
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw event
if (start==false) exit;
draw_set_color(c_white);
draw_set_alpha(1);
///
switch (type) {
    case 0:
        //Ball
        if (os_get_config()!="OEM") {
            var gridsize = obj_game.gridsize;
            draw_set_color(c_white);
            d3d_draw_ellipsoid(x-0.1*gridsize, y-0.1*gridsize, z-0.1*gridsize, x+0.1*gridsize, y+0.1*gridsize, z+0.1*gridsize, -1, 1, 1, 24);
        }
        break;
    case 1:
        //Bomb
        if (os_get_config()!="OEM") {
            var gridsize = obj_game.gridsize;
            draw_set_color(c_orange);
            d3d_draw_ellipsoid(x-0.1*gridsize, y-0.1*gridsize, z-0.1*gridsize, x+0.1*gridsize, y+0.1*gridsize, z+0.1*gridsize, -1, 1, 1, 24);
        }
        break;
    case 2:
        //Ripple animation
        if (draw_on==true &amp;&amp; os_get_config()!="OEM") {
            var gridsize = obj_game.gridsize;
            d3d_transform_set_identity();
            var scale = 1/8;
            d3d_transform_add_scaling(scale, scale, scale);
            d3d_transform_add_rotation_x(x_vec); //up/down
            d3d_transform_add_rotation_z(z_vec); //left/right
            d3d_transform_add_translation(x, y, z+0.1);
            draw_set_alpha(1-i/room_speed);
            draw_circle_glow(0, 0, i/room_speed*gridsize*0.7*(1/scale), min(i/5, 20), 5, c_white, c_white);
            //draw_circle(0,0,min(i/5, 20), true);
            d3d_transform_set_identity();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (type) {
    case 2:
        //Ripple animation
        if (sound_on==true) {
            audio_stop_sound(sound_index);
            audio_emitter_free(sound_pos);
        }
        break;
    case 3:
        //Sound object
        audio_stop_sound(sound_index);
        audio_emitter_free(sound_pos);
        break;
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
