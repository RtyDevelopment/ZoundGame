<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>w = 10;
h = 10;
ch1 = 0.25;
ch2 = 0.25;
ch3 = 0.25;
ch4 = 0.25;

faults = 0;
checkfaults = false;

maze = create_maze(w, h, ch1, ch2, ch3, ch4);
gridsize = 25;
walldist = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (checkfaults==true) {
    ds_grid_destroy(maze);
    maze = create_maze(w, h, ch1, ch2, ch3, ch4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(maze);

w = real(string_digits(get_string("Width: ","10")));
h = real(string_digits(get_string("Height: ","10")));
ch1 = real(string_digits(get_string("Chance1: ","25")));
ch2 = real(string_digits(get_string("Chance2: ","25")));
ch3 = real(string_digits(get_string("Chance3: ","25")));
ch4 = real(string_digits(get_string("Chance4: ","25")));

maze = create_maze(w, h, ch1, ch2, ch3, ch4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Faults: "+string(faults));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mazewidth, mazeheight, mx, my;
mazewidth = ds_grid_width(maze);
mazeheight = ds_grid_height(maze);

draw_set_color(c_ltgray);
draw_rectangle(0, 0, room_width, room_height, 0);

draw_set_color(c_black);
draw_rectangle(0, 0, mazewidth*gridsize-1, mazeheight*gridsize-1, 0);

if (mouse_x&gt;=0 &amp;&amp; mouse_x&lt;mazewidth*gridsize &amp;&amp; mouse_y&gt;=0 &amp;&amp; mouse_y&lt;mazeheight*gridsize) {
    mx = floor(mouse_x/gridsize);
    my = floor(mouse_y/gridsize);
    draw_text(mazewidth*gridsize, mazeheight*gridsize, "X: "+string(mx)+" Y:"+string(my)+"#"+ds_grid_get(maze, mx, my));
    draw_set_color(c_dkgray);
    draw_rectangle(mx*gridsize, my*gridsize, (mx+1)*gridsize-1, (my+1)*gridsize-1, 0);
}

for (var i=0; i&lt;mazewidth; i++) {
    for (var j=0; j&lt;mazeheight; j++) {
        draw_set_color(c_dkgray);
        draw_rectangle(i*gridsize+walldist, j*gridsize+walldist, (i+1)*gridsize-walldist, (j+1)*gridsize-walldist, 0);
        draw_set_color(c_white);
        if (string_char_at(ds_grid_get(maze, i, j), 1)=="0") {
            draw_line(i*gridsize+walldist, j*gridsize+walldist, (i+1)*gridsize-walldist, j*gridsize+walldist);
        } else {
            draw_set_color(c_dkgray);
            draw_rectangle(i*gridsize+walldist, j*gridsize, (i+1)*gridsize-walldist, j*gridsize+walldist, 0);
            draw_set_color(c_white);
            draw_line(i*gridsize+walldist, j*gridsize, i*gridsize+walldist, j*gridsize+walldist);
            draw_line((i+1)*gridsize-walldist, j*gridsize, (i+1)*gridsize-walldist, j*gridsize+walldist);
        }
        if (string_char_at(ds_grid_get(maze, i, j), 2)=="0") {
            draw_line((i+1)*gridsize-walldist, j*gridsize+walldist, (i+1)*gridsize-walldist, (j+1)*gridsize-walldist);
        } else {
            draw_set_color(c_dkgray);
            draw_rectangle((i+1)*gridsize-walldist, j*gridsize+walldist, (i+1)*gridsize, (j+1)*gridsize-walldist, 0);
            draw_set_color(c_white);
            draw_line((i+1)*gridsize-walldist, j*gridsize+walldist, (i+1)*gridsize, j*gridsize+walldist);
            draw_line((i+1)*gridsize-walldist, (j+1)*gridsize-walldist, (i+1)*gridsize, (j+1)*gridsize-walldist);
        }
        if (string_char_at(ds_grid_get(maze, i, j), 3)=="0") {
            draw_line(i*gridsize+walldist, (j+1)*gridsize-walldist, (i+1)*gridsize-walldist, (j+1)*gridsize-walldist);
        } else {
            draw_set_color(c_dkgray);
            draw_rectangle(i*gridsize+walldist, (j+1)*gridsize-walldist, (i+1)*gridsize-walldist, (j+1)*gridsize, 0);
            draw_set_color(c_white);
            draw_line(i*gridsize+walldist, (j+1)*gridsize-walldist, i*gridsize+walldist, (j+1)*gridsize);
            draw_line((i+1)*gridsize-walldist, (j+1)*gridsize-walldist, (i+1)*gridsize-walldist, (j+1)*gridsize);
        }
        if (string_char_at(ds_grid_get(maze, i, j), 4)=="0") {
            draw_line(i*gridsize+walldist, j*gridsize+walldist, i*gridsize+walldist, (j+1)*gridsize-walldist);
        } else {
            draw_set_color(c_dkgray);
            draw_rectangle(i*gridsize, j*gridsize+walldist, i*gridsize+walldist, (j+1)*gridsize-walldist, 0);
            draw_set_color(c_white);
            draw_line(i*gridsize, j*gridsize+walldist, i*gridsize+walldist, j*gridsize+walldist);
            draw_line(i*gridsize, (j+1)*gridsize-walldist, i*gridsize+walldist, (j+1)*gridsize-walldist);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
