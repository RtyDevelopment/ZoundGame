<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

_x = ds_list_create();
_y = ds_list_create();
_l = ds_list_create();
_t = ds_list_create();

ds_list_add(_x, irandom(room_width));
ds_list_add(_y, irandom(room_height));
ds_list_add(_l, irandom_range(50, 100));
ds_list_add(_t, 1);
n = irandom_range(5, 40);

keyboard_string = "";
ipstr = ""

if (view_enabled==true) {
    width = view_wview[0];
    height = view_hview[0];
} else {
    width = room_width;
    height = room_height;
}

if (os_get_config()=="OEM") {
    menu = 1;
} else {
    menu = 0;
}

name = "Steve";
port = 43520;
key = "";
for (var i=0; i&lt;160; i++) key += string(irandom(9));

selfip = "?";
selfhash = string(random(100000)*random(100000))+string(random(100000));

//Serverlists
own_key = ds_list_create();
own_ip = ds_list_create();
own_port = ds_list_create();
own_name = ds_list_create();
own_req = ds_list_create();

lan_key = ds_list_create();
lan_ip = ds_list_create();
lan_port = ds_list_create();
lan_name = ds_list_create();
lan_req = ds_list_create();

//NetworkStuff
//Buffer
netbuffer = buffer_create(1, buffer_grow, 1);

//UDP listening device
udplocalmaster = true;
udpport = 6510;
udpsocket = network_create_socket(network_socket_udp);
udpserver = network_create_server(network_socket_udp, udpport, 32);
if (udpserver&lt;0) {
    udplocalmaster = false;
    while (udpserver&lt;0) {
        udpport++;
        switch (udpport) {
            case 6511: name = "Joe"; break;
            case 6512: name = "John"; break;
            case 6513: name = "David"; break;
            default: name = "James no. "+string(udpport-6513); break;
        }
        udpserver = network_create_server(network_socket_udp, udpport, 32);
    }
}

// Setup a timer so we can broadcast the server IP out to local clients looking...
alarm[0]=5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast our location occasionally. Clients pick this up and can then display servers to the user. 
netbuffer_reset(netbuffer, MSG_LANSEND, udpport, key);
buffer_write(netbuffer, buffer_string, key);
buffer_write(netbuffer, buffer_string, name);
buffer_write(netbuffer, buffer_u16, port);
network_send_broadcast(udpsocket, 6510, netbuffer, buffer_tell(netbuffer));

if (udplocalmaster==false) {
    netbuffer_reset(netbuffer, MSG_LANREQUEST, udpport, key);
    network_send_udp(udpsocket, "127.0.0.1", 6510, netbuffer, buffer_tell(netbuffer));
}

if (selfip=="?") {
    netbuffer_reset(netbuffer, MSG_GETIP, udpport, key);
    buffer_write(netbuffer, buffer_string, md5_string_unicode(selfhash));
    network_send_broadcast(udpsocket, udpport, netbuffer, buffer_tell(netbuffer));
}

// Broadcast once a second...
alarm[0]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_string!="") {
    ipstr += keyboard_string;
    keyboard_string = "";
}
if (keyboard_check_pressed(vk_backspace)==true) ipstr = string_delete(ipstr, string_length(ipstr), 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message recieved
var recvip = ds_map_find_value(async_load, "ip");
var recvdevice = ds_map_find_value(async_load, "id");
var recvbuffer = ds_map_find_value(async_load, "buffer");
buffer_seek(recvbuffer, buffer_seek_start, 0);
var recvmsg = buffer_read(recvbuffer, buffer_u8);
var recvport = buffer_read(recvbuffer, buffer_u16);
var recvkey = buffer_read(recvbuffer, buffer_string);

if (recvdevice==udpserver) {
    switch (recvmsg) {
        case MSG_PING:
            netbuffer_reset(netbuffer, MSG_PONG, udpport, key);
            buffer_write(netbuffer, buffer_u8, buffer_read(recvbuffer, buffer_u8));
            network_send_udp(udpsocket, recvip, recvport, netbuffer, buffer_tell(netbuffer));
            break;
        case MSG_PONG:
            //pass
            break;
        case MSG_GETIP:
            if (buffer_read(recvbuffer, buffer_string)==md5_string_unicode(selfhash)) selfip = recvip;
            break;
        case MSG_LANSEND:
            var recvkey = buffer_read(ds_map_find_value(async_load, "buffer"), buffer_string);
            var recvname = buffer_read(ds_map_find_value(async_load, "buffer"), buffer_string);
            var recvgameport = buffer_read(ds_map_find_value(async_load, "buffer"), buffer_u16);
            if (ds_list_find_index(lan_key, recvkey)&lt;0 &amp;&amp; key!=recvkey) {
                ds_list_add(lan_key, recvkey);
                ds_list_add(lan_ip, recvip);
                ds_list_add(lan_port, recvgameport);
                ds_list_add(lan_name, recvname);
                ds_list_add(lan_req, 0);
                show_debug_message("New server found at: "+recvip+"   called: "+recvname);
            }  
            break;
        case MSG_LANREQUEST:
            var lantransfer_key, lantransfer_ip, lantransfer_port, lantransfer_name;
            lantransfer_key = ds_list_create();
            ds_list_copy(lantransfer_key, lan_key);
            lantransfer_ip = ds_list_create();
            ds_list_copy(lantransfer_ip, lan_ip);
            lantransfer_port = ds_list_create();
            ds_list_copy(lantransfer_port, lan_port);
            lantransfer_name = ds_list_create();
            ds_list_copy(lantransfer_name, lan_name);
            ds_list_add(lantransfer_key, key);
            ds_list_add(lantransfer_ip, selfip);
            ds_list_add(lantransfer_port, port);
            ds_list_add(lantransfer_name, name);
            for (var i=0; i&lt;ds_list_size(lantransfer_key); i++) {
                if (ds_list_find_value(lantransfer_key, i)==recvkey) {
                    ds_list_delete(lantransfer_key, i);
                    ds_list_delete(lantransfer_ip, i);
                    ds_list_delete(lantransfer_port, i);
                    ds_list_delete(lantransfer_name, i);
                    break;
                }
            }
            netbuffer_reset(netbuffer, MSG_LANTRANSFER, udpport, key);
            buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_key));
            buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_ip));
            buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_port));
            buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_name));
            network_send_udp(udpsocket, recvip, recvport, netbuffer, buffer_tell(netbuffer));
            break;
        case MSG_LANTRANSFER:
            ds_list_read(lan_key, buffer_read(recvbuffer, buffer_string));
            ds_list_read(lan_ip, buffer_read(recvbuffer, buffer_string));
            ds_list_read(lan_port, buffer_read(recvbuffer, buffer_string));
            ds_list_read(lan_name, buffer_read(recvbuffer, buffer_string));
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
//Draw background
for (i=0; i&lt;ds_list_size(_x); i+=1) {
    if (ds_list_find_value(_t, i)&gt;=ds_list_find_value(_l, i)) {
        ds_list_delete(_x, i);
        ds_list_delete(_y, i);
        ds_list_delete(_l, i);
        ds_list_delete(_t, i);
    }
    ds_list_replace(_t, i, ds_list_find_value(_t, i)+1);
    //depth = (_t/_l)*100
}
n-=1;
if (n==0) {
    ds_list_add(_x, irandom(room_width));
    ds_list_add(_y, irandom(room_height));
    ds_list_add(_l, irandom_range(50, 100));
    ds_list_add(_t, 1);
    n = irandom_range(5, 40);
}
for (i=0; i&lt;ds_list_size(_x); i+=1) {
    t = ds_list_find_value(_t, i);
    l = ds_list_find_value(_l, i);
    draw_circle_glow(ds_list_find_value(_x, i),ds_list_find_value(_y, i),t,min(t/5, 20),5,make_color_hsv(0, 0, 255*(1-t/l)),make_color_hsv(0, 100, 255*(1-t/l)));
}

//OEM:
if (menu==1) {
    //Draw IP box
    draw_set_alpha(0.6);
    draw_set_color(c_white);
    draw_rectangle(30, 30, width-30, 70, 0);
    draw_set_color(c_black);
    draw_rectangle(30, 30, width-30, 70, 1);
    draw_set_valign(fa_middle);
    draw_text(40, 40, "IP: "+ipstr);
    draw_set_color(c_dkgray);
    draw_text(40, 60, "Own address: "+selfip);
    //Draw players predefined
    for (i=0; i&lt;ds_list_size(own_key); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i, width-30, 140+50*i, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i, width-30, 140+50*i, 1);
        switch (ds_list_find_value(own_req, i)) {
            case 1: draw_set_color(c_green); break;//Request sent
            case 2: draw_set_color(c_yellow); break;//Request rec
        }
        draw_text(40, 105+50*i, ds_list_find_value(own_name, i));
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i, ds_list_find_value(own_ip, i)+":"+string(ds_list_find_value(own_port, i)));
    }
    //Draw players in network
    var prelength = 50*ds_list_size(own_key);
    for (i=0; i&lt;ds_list_size(lan_key); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i+prelength, width-30, 140+50*i+prelength, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i+prelength, width-30, 140+50*i+prelength, 1);
        switch (ds_list_find_value(own_req, i)) {
            case 1: draw_set_color(c_green); break;//Request sent
            case 2: draw_set_color(c_yellow); break;//Request rec
        }
        draw_text(40, 105+50*i+prelength, ds_list_find_value(lan_name, i));
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i+prelength, ds_list_find_value(lan_ip, i)+":"+string(ds_list_find_value(lan_port, i)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="13">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
