<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = "";
ipstr = ""

publicip = "?";
lanip = "?";
hash = string(random(100000)*random(100000))+string(random(100000));

//Serverlists
own_key = ds_list_create();
own_ip = ds_list_create();
own_port = ds_list_create();
own_name = ds_list_create();
own_req = ds_list_create();

lan_key = ds_list_create();
lan_ip = ds_list_create();
lan_port = ds_list_create();
lan_name = ds_list_create();
lan_req = ds_list_create();

//Commands
netcommands = ds_list_create();
netcommands_arg0 = ds_list_create();
netcommands_arg1 = ds_list_create();
netcommands_arg2 = ds_list_create();
netcommands_arg3 = ds_list_create();
netcommands_arg4 = ds_list_create();

//Pingtimerlist
pingmap = ds_map_create();

//NetworkStuff
//Buffer
netbuffer = buffer_create(1, buffer_grow, 1);

//UDP devices
//LAN
udplocalmaster = true;
udpport = 6510;
udpsocket = network_create_socket(network_socket_udp);
udpserver = network_create_server(network_socket_udp, udpport, 32);
if (udpserver&lt;0) {
    udplocalmaster = false;
    while (udpserver&lt;0) {
        udpport++;
        switch (udpport) {
            case 6511: global.name = "Joe"; break;
            case 6512: global.name = "John"; break;
            case 6513: global.name = "David"; break;
            default: global.name = "James no. "+string(udpport-6513); break;
        }
        udpserver = network_create_server(network_socket_udp, udpport, 32);
    }
}
//Game
gameport = global.port;
gameserver = network_create_server(network_socket_tcp, global.port, 32);

alarm[0]=5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>netbuffer_reset(netbuffer, MSG_INFO, udpport, global.key);
buffer_write(netbuffer, buffer_bool, 1);
buffer_write(netbuffer, buffer_string, global.key);
buffer_write(netbuffer, buffer_string, global.name);
buffer_write(netbuffer, buffer_u16, global.port);
network_send_broadcast(udpsocket, 6510, netbuffer, buffer_tell(netbuffer));

if (udplocalmaster==false) {
    netbuffer_reset(netbuffer, MSG_LANREQUEST, udpport, global.key);
    network_send_udp(udpsocket, "127.0.0.1", 6510, netbuffer, buffer_tell(netbuffer));
}

if (lanip=="?") {
    netbuffer_reset(netbuffer, MSG_GETIP, udpport, global.key);
    buffer_write(netbuffer, buffer_string, md5_string_unicode(hash));
    network_send_broadcast(udpsocket, udpport, netbuffer, buffer_tell(netbuffer));
}

if (publicip=="?") {
    http_get("http://gmhtml5host.net46.net/getip.php?msg="+string(MSG_GETIP)+"&amp;hash="+md5_string_unicode(hash));
}

alarm[0]=room_speed*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.networkmenu==true) {
    if (keyboard_string!="") {
        ipstr += keyboard_string;
        keyboard_string = "";
    }
    if (keyboard_check_pressed(vk_backspace)==true) ipstr = string_delete(ipstr, string_length(ipstr), 1);
    if (keyboard_check_released(vk_enter)==true) {
        var ip = "";
        var port = "";
        var tellswitch = 0;
        for (var i=1; i&lt;=string_length(ipstr); i++) {
            var char = string_char_at(ipstr, i);
            if (char==":") tellswitch = 1; else {
                if (tellswitch==0) ip += char; else port += string_digits(char);
            }
        }
        if (port=="") port = 43520;
        ip = network_resolve(ip);
        var socket = network_create_socket(network_socket_tcp);
        network_connect(socket, ip, port);
        netbuffer_reset(netbuffer, MSG_INFOREQUEST, udpport, global.key);
        buffer_write(netbuffer, buffer_string, string(socket));
        network_send_packet(socket, netbuffer, buffer_tell(netbuffer));
        ipstr = "";
    }
}
//*
if (ds_list_size(netcommands)&gt;0) {
    repeat (ds_list_size(netcommands)) {
        switch (ds_list_find_value(netcommands, 0)) {
            case MSG_PING:
                
                break;
            case MSG_INFOREQUEST:
                
                break;
        }
        ds_list_delete(netcommands, 0);
        ds_list_delete(netcommands_arg0, 0);
    }
}//*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var recvip = ds_map_find_value(async_load, "ip");
var recvdevice = ds_map_find_value(async_load, "id");
var recvbuffer = ds_map_find_value(async_load, "buffer");
buffer_seek(recvbuffer, buffer_seek_start, 0);
var recvmsg = buffer_read(recvbuffer, buffer_u8);
var recvport = buffer_read(recvbuffer, buffer_u16);
var recvkey = buffer_read(recvbuffer, buffer_string);

switch (recvmsg) {
    case MSG_PING:
        netbuffer_reset(netbuffer, MSG_PONG, udpport, global.key);
        buffer_write(netbuffer, buffer_u8, buffer_read(recvbuffer, buffer_u8));
        network_send_udp(udpsocket, recvip, recvport, netbuffer, buffer_tell(netbuffer));
        break;
    case MSG_PONG:
        //pass
        break;
    case MSG_GETIP:
        if (buffer_read(recvbuffer, buffer_string)==md5_string_unicode(hash)) lanip = recvip;
        break;
    case MSG_INFOREQUEST:
        netbuffer_reset(netbuffer, MSG_INFO, udpport, global.key);
        buffer_write(netbuffer, buffer_bool, 0);
        buffer_write(netbuffer, buffer_string, global.key);
        buffer_write(netbuffer, buffer_string, global.name);
        buffer_write(netbuffer, buffer_u16, global.port);
        network_send_udp(udpsocket, recvip, recvport, netbuffer, buffer_tell(netbuffer));
        break;
    case MSG_INFO:
        var recvlan = buffer_read(recvbuffer, buffer_bool);
        var recvkey = buffer_read(recvbuffer, buffer_string);
        var recvname = buffer_read(recvbuffer, buffer_string);
        var recvgameport = buffer_read(ds_map_find_value(async_load, "buffer"), buffer_u16);
        if (recvlan==true) {
            if (ds_list_find_index(lan_key, recvkey)&lt;0 &amp;&amp; global.key!=recvkey) {
                ds_list_add(lan_key, recvkey);
                ds_list_add(lan_ip, recvip);
                ds_list_add(lan_port, recvgameport);
                ds_list_add(lan_name, recvname);
                ds_list_add(lan_req, 0);
                show_debug_message("New server found at: "+recvip+"   called: "+recvname);
            }
        } else {
            if (ds_list_find_index(own_key, recvkey)&lt;0 &amp;&amp; global.key!=recvkey) {
                ds_list_add(own_key, recvkey);
                ds_list_add(own_ip, recvip);
                ds_list_add(own_port, recvgameport);
                ds_list_add(own_name, recvname);
                ds_list_add(own_req, 0);
                show_debug_message("New server added at: "+recvip+"   called: "+recvname);
            }
            network_destroy(real(buffer_read(recvbuffer, buffer_string)));
        }
        break;
    case MSG_LANREQUEST:
        var lantransfer_key, lantransfer_ip, lantransfer_port, lantransfer_name;
        lantransfer_key = ds_list_create();
        ds_list_copy(lantransfer_key, lan_key);
        lantransfer_ip = ds_list_create();
        ds_list_copy(lantransfer_ip, lan_ip);
        lantransfer_port = ds_list_create();
        ds_list_copy(lantransfer_port, lan_port);
        lantransfer_name = ds_list_create();
        ds_list_copy(lantransfer_name, lan_name);
        ds_list_add(lantransfer_key, global.key);
        ds_list_add(lantransfer_ip, selfip);
        ds_list_add(lantransfer_port, global.port);
        ds_list_add(lantransfer_name, global.name);
        for (var i=0; i&lt;ds_list_size(lantransfer_key); i++) {
            if (ds_list_find_value(lantransfer_key, i)==recvkey) {
                ds_list_delete(lantransfer_key, i);
                ds_list_delete(lantransfer_ip, i);
                ds_list_delete(lantransfer_port, i);
                ds_list_delete(lantransfer_name, i);
                break;
            }
        }
        netbuffer_reset(netbuffer, MSG_LANTRANSFER, udpport, global.key);
        buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_key));
        buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_ip));
        buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_port));
        buffer_write(netbuffer, buffer_string, ds_list_write(lantransfer_name));
        network_send_udp(udpsocket, recvip, recvport, netbuffer, buffer_tell(netbuffer));
        break;
    case MSG_LANTRANSFER:
        ds_list_read(lan_key, buffer_read(recvbuffer, buffer_string));
        ds_list_read(lan_ip, buffer_read(recvbuffer, buffer_string));
        ds_list_read(lan_port, buffer_read(recvbuffer, buffer_string));
        ds_list_read(lan_name, buffer_read(recvbuffer, buffer_string));
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var recvresultstring = ds_map_find_value(async_load, "result");
var recvresultno = 0;
var newlinechr = false;

var recvurl = ds_map_find_value(async_load, "url");
var recvdevice = ds_map_find_value(async_load, "id");
var recvresult;
var recvmsg = "";

recvresult[0] = "";
for (var i=1; i&lt;=string_length(recvresultstring); i++) {
    var char = string_char_at(recvresultstring, i);
    if (char==chr(10)) {
        if (newlinechr==true) break;
        newlinechr = true;
        recvresultno++;
        recvresult[recvresultno] = "";
    } else {
        newlinechr = false;
        if (recvresultno==0) recvmsg += char; else recvresult[recvresultno-1] += char;
    }
}
recvmsg = real(recvmsg);
for (var i=0; i&lt;recvresultno; i++) {
    if (recvresult[i]==string_digits(recvresult[i])) recvresult[i] = real(recvresult[i]);
}

switch (recvmsg) {
    case MSG_GETIP:
        if (recvresult[0]==md5_string_unicode(hash)) publicip = recvresult[1];
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.networkmenu==true) {
    //Draw IP box
    draw_set_alpha(0.6);
    draw_set_color(c_white);
    draw_rectangle(30, 30, global.scrwidth-30, 70, 0);
    draw_set_color(c_black);
    draw_rectangle(30, 30, global.scrwidth-30, 70, 1);
    draw_set_valign(fa_middle);
    draw_text(40, 40, "IP: "+ipstr);
    draw_set_color(c_dkgray);
    draw_text(40, 60, "Own address: "+publicip+" ("+lanip+")");
    //Draw players predefined
    for (var i=0; i&lt;ds_list_size(own_key); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i, global.scrwidth-30, 140+50*i, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i, global.scrwidth-30, 140+50*i, 1);
        switch (ds_list_find_value(own_req, i)) {
            case 1: draw_set_color(c_green); break;//Request sent
            case 2: draw_set_color(c_yellow); break;//Request rec
        }
        draw_text(40, 105+50*i, ds_list_find_value(own_name, i));
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i, ds_list_find_value(own_ip, i)+":"+string(ds_list_find_value(own_port, i)));
    }
    //Draw players in network
    var prelength = 50*ds_list_size(own_key);
    for (var i=0; i&lt;ds_list_size(lan_key); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i+prelength, width-30, 140+50*i+prelength, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i+prelength, width-30, 140+50*i+prelength, 1);
        switch (ds_list_find_value(own_req, i)) {
            case 1: draw_set_color(c_green); break;//Request sent
            case 2: draw_set_color(c_yellow); break;//Request rec
        }
        draw_text(40, 105+50*i+prelength, ds_list_find_value(lan_name, i));
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i+prelength, ds_list_find_value(lan_ip, i)+":"+string(ds_list_find_value(lan_port, i)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
