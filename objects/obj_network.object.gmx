<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = "";
ipstr = ""

publicip = "?";
lanip = "?";

getip_salt = "";
for (var i=0; i&lt;20; i++) getip_salt += string(irandom(9));
getip_salt = sha1_string_unicode(getip_salt);

net_init(global.name, global.key, global.port, network_socket_tcp, room_speed*3);

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var update = false;
if (lanip=="?") {
    var dataoutputlist, hash;
    dataoutputlist = ds_list_create();
    hash = sha1_string_unicode(string(random(100000)*random(100000))+string(random(100000)));
    ds_list_add(dataoutputlist, hash);
    ds_list_add(dataoutputlist, sha1_string_unicode(hash+getip_salt));
    net_push(NET_BROADCAST, -1, ds_map_find_value(global.net_vars, "net_lanport"), global.key, MSG_GETIP, dataoutputlist);
    ds_list_destroy(dataoutputlist);
    update = true;
}
if (publicip=="?") {
    var dataoutputlist, hash;
    dataoutputlist = ds_list_create();
    hash = sha1_string_unicode(string(random(100000)*random(100000))+string(random(100000)));
    ds_list_add(dataoutputlist, hash);
    ds_list_add(dataoutputlist, sha1_string_unicode(hash+getip_salt));
    net_push(NET_HTTP, "http://gmhtml5host.net46.net/gmnet.php", -1, "1a2b3c4e5f67890", MSG_GETIP, dataoutputlist);
    ds_list_destroy(dataoutputlist);
    //update = true;
}
if (update==true) alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.networkmenu==true) {
    if (keyboard_string!="") {
        ipstr += keyboard_string;
        keyboard_string = "";
    }
    if (keyboard_check_pressed(vk_backspace)==true) ipstr = string_delete(ipstr, string_length(ipstr), 1);
    if (keyboard_check_released(vk_enter)==true) {
        var ip = "";
        var port = "";
        var tellswitch = 0;
        for (var i=1; i&lt;=string_length(ipstr); i++) {
            var char = string_char_at(ipstr, i);
            if (char==":") tellswitch = 1; else {
                if (tellswitch==0) ip += char; else port += string_digits(char);
            }
        }
        if (port=="") port = 43520;
        
        var _id = net_connect(NET_TCP, ip, port);
        var dataoutputlist = ds_list_create();
        net_send(_id, MSG_INFOREQUEST, dataoutputlist);
        ds_list_destroy(dataoutputlist);
        ipstr = "";
    }
}
//Update all NET variables within this object
if (debug_mode==true) {
    globalvar net_vars;
    net_name =              ds_map_find_value(net_vars, "net_name");
    net_key =               ds_map_find_value(net_vars, "net_key");
    net_lanport =           ds_map_find_value(net_vars, "net_lanport");
    net_pubport =           ds_map_find_value(net_vars, "net_pubport");
    net_pubtype =           ds_map_find_value(net_vars, "net_pubtype");
    net_interval =          ds_map_find_value(net_vars, "net_interval");
    net_peer_id =           ds_map_find_value(net_vars, "net_peer_id");
    net_peer_key =          ds_map_find_value(net_vars, "net_peer_key");
    net_peer_ip =           ds_map_find_value(net_vars, "net_peer_ip");
    net_peer_port =         ds_map_find_value(net_vars, "net_peer_port");
    net_peer_nettype =      ds_map_find_value(net_vars, "net_peer_nettype");
    net_peer_name =         ds_map_find_value(net_vars, "net_peer_name");
    net_peer_ping =         ds_map_find_value(net_vars, "net_peer_ping");
    net_peer_lastping =     ds_map_find_value(net_vars, "net_peer_lastping");
    net_peer_pingrecv =     ds_map_find_value(net_vars, "net_peer_pingrecv");
    net_peer_type =         ds_map_find_value(net_vars, "net_peer_type");
    net_peer_socket =       ds_map_find_value(net_vars, "net_peer_socket");
    net_cmdlist =           ds_map_find_value(net_vars, "net_cmdlist");
    net_msglist =           ds_map_find_value(net_vars, "net_msglist");
    net_idcounter =         ds_map_find_value(net_vars, "net_idcounter");
    net_devicemaster =      ds_map_find_value(net_vars, "net_devicemaster");
    net_devicemasterid =    ds_map_find_value(net_vars, "net_devicemasterid");
    net_lanserver =         ds_map_find_value(net_vars, "net_lanserver");
    net_pubserver =         ds_map_find_value(net_vars, "net_pubserver");
    net_timer =             ds_map_find_value(net_vars, "net_timer");
}

//////////////////////////////////////
net_run();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var datainputlist = ds_list_create();
if (ds_map_find_value(async_load, "type")==network_type_data) net_buffer_to_dslist(ds_map_find_value(async_load, "buffer"), datainputlist);
var recvip, recvport, recvtype, recvsocket, recvmsgid;
recvip = ds_map_find_value(async_load, "ip");
recvport = ds_map_find_value(async_load, "port");
recvtype = ds_map_find_value(async_load, "type");
if (recvtype==network_type_data) {
    recvsocket = ds_map_find_value(async_load, "id");
} else {
    recvsocket = ds_map_find_value(async_load, "socket");
}
recvmsgid = net_receive(recvtype, datainputlist, recvip, recvport, recvsocket);
if (recvmsgid&gt;1) {
    var recvlist, recvmsg, recvtype, recvkey, recvname, datastart;
    recvlist = datainputlist;
    recvmsg = real(ds_list_find_value(recvlist, 1));
    recvtype = real(ds_list_find_value(recvlist, 2));
    recvkey = ds_list_find_value(recvlist, 3);
    recvname = ds_list_find_value(recvlist, 4);
    datastart = 8;
    switch (recvmsg) {
        case MSG_GETIP:
            if (sha1_string_unicode(ds_list_find_value(datainputlist, datastart)+getip_salt)==ds_list_find_value(datainputlist, datastart+1) &amp;&amp; lanip=="?") {
                lanip = recvip;
            }
        break;
    }
}
ds_list_destroy(datainputlist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var datainputlist = ds_list_create();
net_string_to_dslist(ds_map_find_value(async_load, "result"), datainputlist);
var recvip, recvmsgid;
recvip = ds_map_find_value(async_load, "url");
recvmsgid = net_receive(network_type_data, datainputlist, recvip, 80, -1);
if (recvmsgid&gt;1) {
    var recvlist, recvmsg, recvtype, recvkey, recvname, datastart;
    recvlist = datainputlist;
    recvmsg = real(ds_list_find_value(recvlist, 1));
    recvtype = real(ds_list_find_value(recvlist, 2));
    recvkey = ds_list_find_value(recvlist, 3);
    recvname = ds_list_find_value(recvlist, 4);
    datastart = 8;
    switch (recvmsg) {
        case MSG_GETIP:
            if (sha1_string_unicode(ds_list_find_value(datainputlist, datastart)+getip_salt)==ds_list_find_value(datainputlist, datastart+1) &amp;&amp; publicip=="?") {
                publicip = ds_list_find_value(datainputlist, datastart+2);
            }
        break;
    }
}
ds_list_destroy(datainputlist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar net_vars;
var net_peer_id, net_peer_key, net_peer_ip, net_peer_port, net_peer_nettype, net_peer_name, net_peer_ping, net_peer_lastping, net_peer_pingrecv, net_peer_type, net_peer_socket;
net_peer_id =           ds_map_find_value(net_vars, "net_peer_id");
net_peer_key =          ds_map_find_value(net_vars, "net_peer_key");
net_peer_ip =           ds_map_find_value(net_vars, "net_peer_ip");
net_peer_port =         ds_map_find_value(net_vars, "net_peer_port");
net_peer_nettype =      ds_map_find_value(net_vars, "net_peer_nettype");
net_peer_name =         ds_map_find_value(net_vars, "net_peer_name");
net_peer_ping =         ds_map_find_value(net_vars, "net_peer_ping");
net_peer_lastping =     ds_map_find_value(net_vars, "net_peer_lastping");
net_peer_pingrecv =     ds_map_find_value(net_vars, "net_peer_pingrecv");
net_peer_type =         ds_map_find_value(net_vars, "net_peer_type");
net_peer_socket =       ds_map_find_value(net_vars, "net_peer_socket");
globalvar alphamulti;

if (global.networkmenu==true) {
    //Draw IP box
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_set_font(fnt_default);
    draw_set_alpha(0.6*alphamulti);
    draw_set_color(c_white);
    draw_rectangle(30, 30, global.scrwidth-30, 70, 0);
    draw_set_color(c_black);
    draw_rectangle(30, 30, global.scrwidth-30, 70, 1);
    draw_set_valign(fa_middle);
    draw_text(40, 40, "IP: "+ipstr);
    draw_set_color(c_dkgray);
    draw_text(40, 60, "Own address: "+publicip+" ("+lanip+")");
    //Draw players
    for (var i=0; i&lt;ds_list_size(net_peer_id); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i, global.scrwidth-30, 140+50*i, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i, global.scrwidth-30, 140+50*i, 1);
        draw_text(40, 105+50*i, ds_list_find_value(net_peer_name, i)+" ("+string(ds_list_find_value(net_peer_ping, i))+" ms)");
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i, ds_list_find_value(net_peer_ip, i)+":"+string(ds_list_find_value(net_peer_port, i)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
