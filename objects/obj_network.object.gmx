<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = "";
ipstr = ""

publicip = "?";
lanip = "?";

pubhash = "-1";
lanhash = "-1";

net_init(global.name, global.key, global.port, network_socket_tcp, room_speed*3);

timer = 0;

//OutputBuffer
dataoutputlist = ds_list_create();
//InputBuffer
datainputlist = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.networkmenu==true) {
    if (keyboard_string!="") {
        ipstr += keyboard_string;
        keyboard_string = "";
    }
    if (keyboard_check_pressed(vk_backspace)==true) ipstr = string_delete(ipstr, string_length(ipstr), 1);
    if (keyboard_check_released(vk_enter)==true) {
        var ip = "";
        var port = "";
        var tellswitch = 0;
        for (var i=1; i&lt;=string_length(ipstr); i++) {
            var char = string_char_at(ipstr, i);
            if (char==":") tellswitch = 1; else {
                if (tellswitch==0) ip += char; else port += string_digits(char);
            }
        }
        if (port=="") port = 43520;
        
        ds_list_clear(dataoutputlist);
        var _id = net_connect(NET_TCP, ip, port);
        net_send(_id, MSG_INFOREQUEST, dataoutputlist);
        ipstr = "";
    }
}
//////////////////////////////////////
if (timer==0) {
    if (lanip=="?") {
        lanhash = string(random(100000)*random(100000))+string(random(100000));
        ds_list_clear(dataoutputlist);
        ds_list_add(dataoutputlist, md5_string_unicode(lanhash));
        net_push(NET_BROADCAST, -1, global.net_lanport, MSG_GETIP, dataoutputlist);
    }
    if (publicip=="?") {
        pubhash = string(random(100000)*random(100000))+string(random(100000));
        ds_list_clear(dataoutputlist);
        ds_list_add(dataoutputlist, md5_string_unicode(pubhash));
        net_push(NET_HTTP, "http://gmhtml5host.net46.net/gmnet.php", -1, MSG_GETIP, dataoutputlist);
    }
    timer = 90;
}
timer--;
net_run();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_clear(datainputlist);
if (ds_map_find_value(async_load, "type")==network_type_data) net_buffer_to_dslist(ds_map_find_value(async_load, "buffer"), datainputlist);
var recvip = ds_map_find_value(async_load, "ip");
var recvport = ds_map_find_value(async_load, "port");
var recvtype = ds_map_find_value(async_load, "type");
var recvsocket;
if (recvtype==network_type_data) {
    recvsocket = ds_map_find_value(async_load, "id");
} else {
    recvsocket = ds_map_find_value(async_load, "socket");
}
var recvmsgid = net_receive(recvtype, datainputlist, recvip, recvport, recvsocket);
if (recvmsgid!=1 &amp;&amp; recvmsgid!=-1) {
    switch (recvmsgid) {
        case MSG_GETIP:
            if (ds_list_find_value(datainputlist, 0)==md5_string_unicode(lanhash) &amp;&amp; lanhash!="-1") {
                lanip = ds_map_find_value(async_load, "ip");
                lanhash = "-1";
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_clear(datainputlist);
net_string_to_dslist(ds_map_find_value(async_load, "result"), datainputlist);
var recvurl = ds_map_find_value(async_load, "url");
var recvmsgid = net_receive(network_type_data, datainputlist, recvurl, 80, -1);
if (recvmsgid!=1 &amp;&amp; recvmsgid!=-1) {
    switch (recvmsgid) {
        case MSG_GETIP:
            if (ds_list_find_value(datainputlist, 0)==md5_string_unicode(pubhash) &amp;&amp; pubhash!="-1") {
                publicip = ds_list_find_value(datainputlist, 1);
                pubhash = "-1";
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar net_own_key, net_own_ip, net_own_port, net_own_name, net_own_req, net_own_ping;
globalvar net_lan_key, net_lan_ip, net_lan_port, net_lan_name, net_lan_req, net_lan_ping;

if (global.networkmenu==true) {
    //Draw IP box
    draw_set_alpha(0.6);
    draw_set_color(c_white);
    draw_rectangle(30, 30, global.scrwidth-30, 70, 0);
    draw_set_color(c_black);
    draw_rectangle(30, 30, global.scrwidth-30, 70, 1);
    draw_set_valign(fa_middle);
    draw_text(40, 40, "IP: "+ipstr);
    draw_set_color(c_dkgray);
    draw_text(40, 60, "Own address: "+publicip+" ("+lanip+")");
    //Draw players predefined
    for (var i=0; i&lt;ds_list_size(net_own_key); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i, global.scrwidth-30, 140+50*i, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i, global.scrwidth-30, 140+50*i, 1);
        switch (ds_list_find_value(net_own_req, i)) {
            case 1: draw_set_color(c_green); break;//Request sent
            case 2: draw_set_color(c_yellow); break;//Request rec
        }
        draw_text(40, 105+50*i, ds_list_find_value(net_own_name, i)+" ("+string(ds_list_find_value(net_own_ping, i))+" ms)");
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i, ds_list_find_value(net_own_ip, i)+":"+string(ds_list_find_value(net_own_port, i)));
    }
    //Draw players in network
    var prelength = 50*ds_list_size(net_own_key);
    for (var i=0; i&lt;ds_list_size(net_lan_key); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 90+50*i+prelength, global.scrwidth-30, 140+50*i+prelength, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 90+50*i+prelength, global.scrwidth-30, 140+50*i+prelength, 1);
        switch (ds_list_find_value(net_lan_req, i)) {
            case 1: draw_set_color(c_green); break;//Request sent
            case 2: draw_set_color(c_yellow); break;//Request rec
        }
        draw_text(40, 105+50*i+prelength, ds_list_find_value(net_lan_name, i)+" ("+string(ds_list_find_value(net_lan_ping, i))+" ms)");
        draw_set_color(c_dkgray);
        draw_text(40, 125+50*i+prelength, ds_list_find_value(net_lan_ip, i)+":"+string(ds_list_find_value(net_lan_port, i)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
