<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = "";
ipstr = ""

publicip = "?";
lanip = "?";

getip_salt = "";
for (var i=0; i&lt;20; i++) getip_salt += string(irandom(9));
getip_salt = sha1_string_unicode(getip_salt);

netInst = net_init(global.name, global.key, global.port, network_socket_tcp, room_speed*3, 128, "");
server = net_connect(netInst, "NET_HTTP", "1a2b3c4e5f67890", "http://gmhtml5host.net46.net/gmnet.php", 80);

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var update = false;
if (lanip=="?") {
    var dataoutputlist, hash;
    dataoutputlist = ds_list_create();
    hash = sha1_string_unicode(string(random(100000)*random(100000))+string(random(100000)));
    ds_list_add(dataoutputlist, hash);
    ds_list_add(dataoutputlist, sha1_string_unicode(hash+getip_salt));
    net_send(netInst, -6510, "MSG_GETIP", dataoutputlist);
    ds_list_destroy(dataoutputlist);
    update = true;
}
if (publicip=="?") {
    var dataoutputlist, hash;
    dataoutputlist = ds_list_create();
    hash = sha1_string_unicode(string(random(100000)*random(100000))+string(random(100000)));
    ds_list_add(dataoutputlist, hash);
    ds_list_add(dataoutputlist, sha1_string_unicode(hash+getip_salt));
    net_send(netInst, server, "MSG_GETIP", dataoutputlist);
    ds_list_destroy(dataoutputlist);
    update = true;
}
if (update==true) alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.networkmenu==true) {
    if (keyboard_string!="") {
        ipstr += keyboard_string;
        keyboard_string = "";
    }
    if (keyboard_check_pressed(vk_backspace)==true) ipstr = string_delete(ipstr, string_length(ipstr), 1);
    if (keyboard_check_released(vk_enter)==true) {
        var key = "";
        var ip = "";
        var port = "";
        var tellswitch = 0;
        for (var i=1; i&lt;=string_length(ipstr); i++) {
            var char = string_char_at(ipstr, i);
            if (char=="@") {
                tellswitch = 1;
            } else if (char==":") {
                tellswitch = 2; 
            } else {
                switch (tellswitch) {
                    case 0:
                        key += char;
                        break;
                    case 1:
                        ip += char;
                        break;
                    default:
                        port += string_digits(char);
                }
            }
        }
        if (port=="") port = 43520; else port = real(port);
        
        var _id;
        if (tellswitch==0) {
            _id = net_connect(netInst, "NET_TCP", key);
        } else {
            _id = net_connect(netInst, "NET_TCP", key, ip, port);
        }
        var dataoutputlist = ds_list_create();
        net_send(netInst, _id, "MSG_CONN", dataoutputlist);
        ds_list_destroy(dataoutputlist);
        ipstr = "";
    }
}

net_run(netInst);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var datainputlist = ds_list_create();
if (ds_map_find_value(async_load, "type")==network_type_data) net_buffer_to_dslist(ds_map_find_value(async_load, "buffer"), datainputlist);
var recvip, recvport, recvtype, recvsocket, returnval;
recvip = ds_map_find_value(async_load, "ip");
recvport = ds_map_find_value(async_load, "port");
recvtype = ds_map_find_value(async_load, "type");
if (recvtype==network_type_data) {
    recvsocket = ds_map_find_value(async_load, "id");
} else {
    recvsocket = ds_map_find_value(async_load, "socket");
}
returnval = net_receive(netInst, recvtype, datainputlist, recvip, recvport, recvsocket);
switch (returnval) {
    case 1:
        ds_list_destroy(datainputlist);
        exit;
    case 0:
        ds_list_destroy(datainputlist);
        exit;
    default:
        var recvheaders, recvlist, datastart, recvtype, recvkey, recvtime, recvmsg,;
        recvheaders = abs(returnval);
        recvlist = datainputlist;
        recvip = ds_map_find_value(recvheaders, "ip");
        recvport = ds_map_find_value(recvheaders, "port");
        datastart = ds_map_find_value(recvheaders, "datastart");
        recvtype = ds_map_find_value(recvheaders, "type");
        recvkey = ds_map_find_value(recvheaders, "srckey");
        recvtime = ds_map_find_value(recvheaders, "time");
        if (ds_map_exists(recvheaders, "msg")==true) recvmsg = ds_map_find_value(recvheaders, "msg"); else recvmsg = "default";
        switch (recvmsg) {
            case "MSG_GETIP":
                if (sha1_string_unicode(ds_list_find_value(datainputlist, datastart)+getip_salt)==ds_list_find_value(datainputlist, datastart+1) &amp;&amp; lanip=="?") {
                    lanip = recvip;
                }
            break;
        }
        break;
}
ds_map_destroy(recvheaders);
ds_list_destroy(datainputlist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var datainputlist = ds_list_create();
net_string_to_dslist(ds_map_find_value(async_load, "result"), datainputlist);
var recvip, returnval;
recvip = ds_map_find_value(async_load, "url");
returnval = net_receive(netInst, network_type_data, datainputlist, recvip, 80, -1);
switch (returnval) {
    case 1:
        ds_list_destroy(datainputlist);
        exit;
    case 0:
        ds_list_destroy(datainputlist);
        exit;
    default:
        var recvheaders, recvlist, recvport, datastart, recvtype, recvkey, recvtime, recvmsg,;
        recvheaders = abs(returnval);
        recvlist = datainputlist;
        recvip = ds_map_find_value(recvheaders, "ip");
        recvport = ds_map_find_value(recvheaders, "port");
        datastart = ds_map_find_value(recvheaders, "datastart");
        recvtype = ds_map_find_value(recvheaders, "type");
        recvkey = ds_map_find_value(recvheaders, "srckey");
        recvtime = ds_map_find_value(recvheaders, "time");
        if (ds_map_exists(recvheaders, "msg")==true) recvmsg = ds_map_find_value(recvheaders, "msg"); else recvmsg = "default";
        switch (recvmsg) {
            case "MSG_GETIP":
                if (sha1_string_unicode(ds_list_find_value(datainputlist, datastart)+getip_salt)==ds_list_find_value(datainputlist, datastart+1) &amp;&amp; publicip=="?") {
                    publicip = ds_list_find_value(datainputlist, datastart+2);
                    net_disconnect(netInst, server);
                }
            break;
        }
        break;
}
ds_map_destroy(recvheaders);
ds_list_destroy(datainputlist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var net_peer_id, net_peer_key, net_peer_ip, net_peer_port, net_peer_nettype, net_peer_name, net_peer_ping, net_peer_lastping, net_peer_pingrecv, net_peer_type, net_peer_socket;
net_peer_id =           ds_map_find_value(netInst, "net_peer_id");
net_peer_key =          ds_map_find_value(netInst, "net_peer_key");
net_peer_ip =           ds_map_find_value(netInst, "net_peer_ip");
net_peer_port =         ds_map_find_value(netInst, "net_peer_port");
net_peer_nettype =      ds_map_find_value(netInst, "net_peer_nettype");
net_peer_name =         ds_map_find_value(netInst, "net_peer_name");
net_peer_ping =         ds_map_find_value(netInst, "net_peer_ping");
net_peer_lastping =     ds_map_find_value(netInst, "net_peer_lastping");
net_peer_pingrecv =     ds_map_find_value(netInst, "net_peer_pingrecv");
net_peer_type =         ds_map_find_value(netInst, "net_peer_type");
net_peer_socket =       ds_map_find_value(netInst, "net_peer_socket");
globalvar alphamulti;

if (global.networkmenu==true) {
    //Draw IP box
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_set_font(fnt_default);
    draw_set_alpha(0.6*alphamulti);
    draw_set_color(c_white);
    draw_rectangle(30, 30, global.scrwidth-30, 90, 0);
    draw_set_color(c_black);
    draw_rectangle(30, 30, global.scrwidth-30, 90, 1);
    draw_set_valign(fa_middle);
    draw_text(40, 40, "Key@IP:port: "+ipstr);
    draw_set_color(c_dkgray);
    draw_text(40, 60, "Own address: "+publicip+" ("+lanip+")");
    draw_set_color(c_dkgray);
    draw_text(40, 80, "Own key: "+global.key);
    //Draw players
    for (var i=0; i&lt;ds_list_size(net_peer_id); i++) {
        draw_set_color(c_white);
        draw_rectangle(30, 110+50*i, global.scrwidth-30, 160+50*i, 0);
        draw_set_color(c_black);
        draw_rectangle(30, 110+50*i, global.scrwidth-30, 160+50*i, 1);
        draw_text(40, 125+50*i, ds_list_find_value(net_peer_name, i)+" ("+string(ds_list_find_value(net_peer_ping, i))+" ms)");
        draw_set_color(c_dkgray);
        draw_text(40, 145+50*i, ds_list_find_value(net_peer_ip, i)+":"+string(ds_list_find_value(net_peer_port, i)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
